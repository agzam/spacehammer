* Edit with Emacs

  [[./edit-with-emacs-demo.gif/]]

  Any text, in just any app can be edited using Emacs. The idea is simple - you press a dedicated key-combo (default: =Cmd+Ctrl+O=), Spacehammer copies the existing text & calls ~emacsclient~, which invokes a function that opens a buffer and pastes the text into it. Once you finish editing, you press =C-c C-c=, Emacs grabs the text, switches back to where you were before and pastes the new text in there. It works surprisingly well.

  You can for example:
  - open Browser's Dev Tools;
  - press =Cmd+Ctrl+O=,
  - then in Emacs, switch to js-mode, have all the bells and whistles: syntax-highlighting, autocomplete, etc.;
  - write some javascript;
  - finish editing, press =C-c C-c=
    and it would paste that code back into the Dev Tools console.

** Setup and customization

   Note that Emacs *has to be running in daemon mode*, [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][see documentation]].

   After Spacehammer invokes ~emacsclient~, it calls multiple elisp functions. Those functions are in the =~/.hammerspoon/spacehammer.el= Emacs package. That package needs to be pre-loaded into Emacs.

*** Package installation
The package currently is not published on MELPA or other repositories, so you'd have to use your preferred package manager or whichever way you usually utilize to load things into Emacs.

*** Doom
Doom Emacs users can either:
- modify their main packages.el and custom.el
- or create a custom module

**** packages.el
There are two options:

***** Load the package from GitHub:

#+begin_src elisp
(when (eq system-type 'darwin)
  (package! spacehammer :recipe (:host github
                                 :repo "agzam/spacehammer"
                                 :files ("*.el"))))
#+end_src

***** Or symlink to the folder:
Since you already have the package file in ~/.hammerspoon/, instead of loading it from GitHub, you may choose to load it directly.

If you're adding it as part of your custom module, you just need to symlink it:

#+begin_src sh
ln -s ~/.hammerspoon/ ~/.doom.d/modules/my-module
#+end_src

Here's how the dir structure would look like:

 #+begin_src
 ├── my-module
     └── spacehammer
     │   └── spacehammer.el -> (symlinked to ~/.hammerspoon/spacehammer.el)
     └── packages.el
     └── config.el
 #+end_src

And the packages.el would be like this:

#+begin_src elisp
(when (eq system-type 'darwin)
  (package! spacehammer :recipe (:local-repo "spacehammer" :files ("*.el"))))
#+end_src

If you don't want to add it to a custom module, everything above can be applied at the level of =~/doom.d=, instead of =my-module=
**** config.el
That's where you would tweak your editing experience, use hooks, etc. Here's an example config:

#+begin_src elisp

(use-package! spacehammer
  :defer t
  :commands spacehammer-edit-with-emacs
  :config
  (add-hook! 'spacehammer-edit-with-emacs-hook
             #'spacehammer-edit-with-emacs-h)
  (add-hook! 'spacehammer-before-finish-edit-with-emacs-hook
             #'spacehammer-before-finish-edit-with-emacs-h)

  ;; control where the window for edit buffer appears
  (add-to-list
   'display-buffer-alist
   '("\\* spacehammer-edit.*"
     (display-buffer-reuse-window
      display-buffer-in-direction)
     (direction . right)
     (window . root)
     (window-width . 0.30))))

;; functions typically would go into autoload.el

;;;###autoload
(defun spacehammer-edit-with-emacs-h (buffer-name pid title)
  (with-current-buffer (get-buffer buffer-name)
    ;; need to set a filename, otherwise lsp in that buffer won't work
    (set-visited-file-name (format "/tmp/%s_%s_%s" buffer-name pid title))
    (set-buffer-modified-p nil)
    (markdown-mode)
    (setq-local spacehammer--caller-pid pid)
    (evil-insert +1)))


;;;###autoload
(defun spacehammer-before-finish-edit-with-emacs-h (bufname pid)
  ;; if you set a visitited file, e.g., for lsp to work, it's probably good idea to do
  ;; this, so you're not annoyed with a prompt that you're closing a buffer with unsaved
  ;; content.
  (with-current-buffer bufname
    (set-buffer-modified-p nil)))

#+end_src


*** Spacemacs

    Spacemacs users can either:
    - add the package recipe to ~dotspacemacs-additional-packages~;
    - or create a custom Spacemacs layer;

      Creating a custom layer is easy, you need a ~packages.el~ file in a directory for your layer (to learn more, check [[https://github.com/syl20bnr/spacemacs/blob/develop/doc/LAYERS.org][Spacemacs documentation]])

**** Spacemacs layer minimal example
    Let's say you call the layer ~my-layer~, then the directory structure would look like the following:

    #+begin_src
    ├── my-layer
    │   └── packages.el
    #+end_src

    You place ~my-layer~ in ~dotspacemacs-configuration-layer-path~ directory of your Spacemacs config.

    Here's a minimal example of ~packages.el~ that includes spacehammer.el:

    - First, you need to add spacehammer to the list of packages included in the layer
      #+begin_src emacs-lisp
        (defconst my-layer-packages
          '((spacehammer
             :location (recipe                        ; Basically this telling Emacs
                        :fetcher file                 ; where to look for the package file (spacehammer.el)
                        :path "~/.hammerspoon/"))))


        ;; Sometimes (depending on the Emacs version and other things) that approach may not
        ;; work. Emacs will complain about not being able to load the package. In that
        ;; case, you can symlink the file and the directory structure for the layer has
        ;; to be like this:

        ;; .
        ;; ├── local
        ;; │   └── spacehammer
        ;; │       └── spacehammer.el -> ~/.hammerspoon/spacehammer.el
        ;; └── packages.el

        ;; and the recipe would have to be something like this:

        (defconst my-layer-packages
          '((spacehammer :location local)))

        ;; if you'd like to use the same Spacemacs config on different machines that
        ;; aren't Macs, and you don't want it to complain about not finding the package
        ;; (since Hammerspoon is not there):

        (defconst my-layer-packages `(,(when (eq system-type 'darwin)
                                         '(spacehammer :location local))))
      #+end_src

    - Next thing you need is to add an init function like so:

    #+begin_src emacs-lisp
      (defun my-layer/init-spacehammer ()
        (use-package spacehammer
          :demand t))
    #+end_src

    - Add your layer to ~dotspacemacs-configuration-layers~ in your Spacemacs config
    - Either restart Emacs or run ~M-x dotspacemacs/sync-configuration-layers~ =<SPC f e R>=

